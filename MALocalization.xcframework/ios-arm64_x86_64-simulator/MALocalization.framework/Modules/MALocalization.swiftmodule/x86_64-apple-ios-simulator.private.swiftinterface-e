// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name MALocalization
import CryptoKit
import Foundation
@_exported import MALocalization
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct MALocalizationUpdate {
  public var success: Swift.Bool
  public var didFetchNewLocalizations: Swift.Bool
}
public struct MALocalizationSettings {
  public class Builder {
    public init()
    public func environment(_ value: MALocalization.MALocalizationEnvironment) -> Self
    public func verboseMode(_ value: Swift.Bool) -> Self
    public func persistCustomLanguage(_ value: Swift.Bool) -> Self
    public func build() -> MALocalization.MALocalizationSettings
    @objc deinit
  }
}
public enum MALocalizationEnvironment : Swift.String {
  case Staging, Production
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.NSNotification.Name {
  public struct MALocalization {
    public static let LocalizationsUpdated: Foundation.Notification.Name
  }
}
@_hasMissingDesignatedInitializers public class MALocalization {
  public static let shared: MALocalization.MALocalization
  public var currentLanguageCode: Swift.String {
    get
  }
  public func initialize(projectId: Swift.String, bundleKey: Swift.String, settings: MALocalization.MALocalizationSettings = MALocalizationSettings.Builder().build())
  public func swizzleMainBundle()
  public func checkForUpdates()
  public func getString(for key: Swift.String) -> Swift.String
  @discardableResult
  public func changeLanguage(_ languageCode: Swift.String) -> Swift.Bool
  public func availableLanguageCodes() -> [Swift.String]
  @objc deinit
}
extension MALocalization.MALocalizationEnvironment : Swift.Equatable {}
extension MALocalization.MALocalizationEnvironment : Swift.Hashable {}
extension MALocalization.MALocalizationEnvironment : Swift.RawRepresentable {}
